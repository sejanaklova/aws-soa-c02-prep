
Description:  Top10 Cats S3 Bucket with Static Website Hosting and Public Access.
Parameters:
  RegisteredDomainName:
    Type: String
    Default: "realcornyunicorn.com"
    Description: "Enter the domain name."
  HostedZoneId:
    Type: String
    Default: "Z08261792EXXG3KEPG6TG"
    Description: "Enter the Hosted Zone ID for the domain above."
    
Resources:
  Top10CatsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Top10CatsBucket
      PolicyDocument:
        # Version: 2012-10-17
        # Statement:
        #   -
        #     Sid: PublicAccess
        #     Effect: Allow
        #     Principal: '*'
        #     Action:
        #       - "s3:GetObject"
        #     Resource:
        #       - !Sub "arn:aws:s3:::${Top10CatsBucket}/*"
        Version: 2008-10-17
        Statement:
          - 
            Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${Top10CatsBucket}/*"
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CfDistribution}'

  BucketDeleter:
    Type: Extension::S3::BucketDeleter
    Properties:
      BucketName: !Ref Top10CatsBucket

  CopyTop10Cats:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt CopyS3ObjectsFunction.Arn
      SourceBucket: "cl-randomstuffforlessons"
      SourcePrefix: "cloud_front_and_s3"
      Bucket: !Ref Top10CatsBucket
  CopyS3ObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects into buckets
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt S3CopyRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os 
          import json
          import cfnresponse
          import boto3
          import logging

          from botocore.exceptions import ClientError
          client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            source_bucket = event['ResourceProperties']['SourceBucket']
            source_prefix = event['ResourceProperties'].get('SourcePrefix') or ''
            bucket = event['ResourceProperties']['Bucket']
            prefix = event['ResourceProperties'].get('Prefix') or ''

            result = cfnresponse.SUCCESS

            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = copy_objects(source_bucket, source_prefix, bucket, prefix)
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket, prefix)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED

            cfnresponse.send(event, context, result, {})

          def copy_objects(source_bucket, source_prefix, bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=source_bucket, Prefix=source_prefix)
            for key in {x['Key'] for page in page_iterator for x in page['Contents']}:
              dest_key = os.path.join(prefix, os.path.relpath(key, source_prefix))
              if not key.endswith('/'):
                print('copy {} to {}'.format(key, dest_key))
                client.copy_object(CopySource={'Bucket': source_bucket, 'Key': key}, Bucket=bucket, Key = dest_key)
            return cfnresponse.SUCCESS

          def delete_objects(bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
            objects = [{'Key': x['Key']} for page in page_iterator for x in page['Contents']]
            client.delete_objects(Bucket=bucket, Delete={'Objects': objects})
            return cfnresponse.SUCCESS
  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: ReadFromLCBucket
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::cl-randomstuffforlessons"
                  - !Sub "arn:aws:s3:::cl-randomstuffforlessons/*"
              -
                Sid: WriteToStudentBuckets
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${Top10CatsBucket}"
                  - !Sub "arn:aws:s3:::${Top10CatsBucket}/*"

  CfDistribution:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Delete
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases: [!Sub 'merlin.${RegisteredDomainName}']
        ViewerCertificate:
            AcmCertificateArn: 'arn:aws:acm:us-east-1:271156154063:certificate/c97ac85f-d1c7-4ed8-b16b-57eda59ce9c2'
            MinimumProtocolVersion: 'TLSv1.2_2021'
            SslSupportMethod: 'sni-only'      
        Origins:
        - Id: !GetAtt Top10CatsBucket.DomainName             
          DomainName: !GetAtt Top10CatsBucket.DomainName
          S3OriginConfig:
            OriginAccessIdentity: ""
          OriginAccessControlId: !GetAtt CloudFrontOAC.Id   
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          TargetOriginId: !GetAtt Top10CatsBucket.DomainName
        HttpVersion: 'http2and3'  
        PriceClass: "PriceClass_100"
        IPV6Enabled: true
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig: 
          Description: "The OAC setting used for the CF distribution above"
          Name: !Sub '${Top10CatsBucket}-oac'
          OriginAccessControlOriginType: 's3'
          SigningBehavior: 'always'
          SigningProtocol: 'sigv4'

  AliasAtypeToCf:
    Type: AWS::Route53::RecordSet
    DeletionPolicy: Delete
    Properties:
      Name: !Sub 'merlin.${RegisteredDomainName}'
      AliasTarget: 
          DNSName: !GetAtt CfDistribution.DomainName
          # This is always the hosted zone ID for alias records that route traffic to a Cf distro
          HostedZoneId: 'Z2FDTNDATAQYW2'
      Type: 'A'
      HostedZoneId: !Ref HostedZoneId
  AliasAAAAtypeToCf:
    Type: AWS::Route53::RecordSet
    DeletionPolicy: Delete
    Properties:
      Name: !Sub 'merlin.${RegisteredDomainName}'
      AliasTarget: 
          DNSName: !GetAtt CfDistribution.DomainName
          # This is always the hosted zone ID for alias records that route traffic to a Cf distro
          HostedZoneId: 'Z2FDTNDATAQYW2'
      Type: 'AAAA'
      HostedZoneId: !Ref HostedZoneId

##
  # ExternalDomainHostedZone: 
  #   Type: "AWS::Route53::HostedZone"
  #   Properties: 
  #     Name: !Ref RegisteredDomainName
  # WaitHandle:
  #   Type: AWS::CloudFormation::WaitConditionHandle
  # WaitCondition:
  #   Type: AWS::CloudFormation::WaitCondition
  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT4M
  #       Count: 0
  #   # Properties:
  #     # Handle: !Ref WaitHandle
  #     # Timeout: '300'
  #     # Count: 5
  #   DependsOn: ExternalDomainHostedZone

  # CustomSSLCert:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: "realcornyunicorn.com"
  #     DomainValidationOptions: 
  #       - DomainName: "realcornyunicorn.com"
  #       - HostedZoneId: !Ref HostedZoneId
  #     SubjectAlternativeNames: 
  #       - "merlin.realcornyunicorn.com"
  #     ValidationMethod: 'DNS'
  #   # DependsOn: WaitCondition
##

Outputs:
  S3websiteEndPoint:
    Description: "URL to access static website direct to S3"
    Value: !GetAtt Top10CatsBucket.WebsiteURL
  CfDistributionDomainName:
    Description: "The domain name of the Cf resource"
    Value: !GetAtt CfDistribution.DomainName
  CfAlternateDomainName:
    Description: "The alternate domain name (CNAME) to use in URL for this Cf distribution"
    Value: !Sub 'merlin.${RegisteredDomainName}'
  # DomainNameServers:
  #   Description: "The AWS NameServers to be added to the external registrar account"
  #   Value: !GetAtt ExternalDomainHostedZone.NameServers
    




